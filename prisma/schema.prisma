// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserEnum {
  ADMIN
  NORMAL
}

model User {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  email    String  @unique
  password String
  isVerify Boolean @default(false)

  firstname String?
  lastName  String?

  role UserEnum @default(NORMAL)

  PlayList PlayList[]
  Song     Song[]
}

enum PlayListType {
  CHILL
  GAMING
  WORKING
  SPLEEPING
  PARTY
  UNKNOW
}

model PlayList {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  name String        @default("user play list name")
  type PlayListType? @default(UNKNOW)
  visibility Boolean @default(false)

  userID Int
  user   User           @relation(fields: [userID], references: [id], onDelete: Cascade)
  song   PlayListSong[]
}

enum SONG_TYPE {
  LOFI
  SYNTHWAVE
  POP
  ROCK
  CLASSIC
  BOLERO
  ELECTRIC
  OTHERS
}

model Song {
  id       Int      @id @default(autoincrement())
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  songName     String
  songFileName String
  size         Float?     @default(0)
  extension    String?
  type         SONG_TYPE? @default(OTHERS)
  imgURL       String?    @default("")
  visibility   Boolean    @default(false)

  likes       Int @default(0)
  dislikes    Int @default(0)
  listenTimes Int @default(0)

  userID Int
  user   User @relation(fields: [userID], references: [id], onDelete: Cascade)

  playList PlayListSong[]
}

model PlayListSong {
  playListID Int
  songID     Int
  PlayList   PlayList @relation(fields: [playListID], references: [id], onDelete: Cascade)
  Song       Song     @relation(fields: [songID], references: [id], onDelete: Cascade)

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  @@id([playListID, songID])
}
